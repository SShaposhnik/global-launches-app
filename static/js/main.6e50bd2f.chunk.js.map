{"version":3,"sources":["containers/Catalog/component/MapChart/MapChart.js","containers/Catalog/component/TableOld/TableOld.js","containers/Catalog/component/TableOld2/TableOld2.js","containers/Catalog/component/Timer/Timer.js","containers/Catalog/component/Table/Table.js","containers/Catalog/component/NextLaunchTable/NextLaunchTable.js","containers/Catalog/component/SliderMapChart/MapChart.js","containers/Catalog/component/TestTable/Table.js","containers/Catalog/component/SliderMapChart/SliderMapChart.js","containers/Catalog/component/LoadLaunchData/index.js","containers/Catalog/component/TestTable/Menu.js","containers/Catalog/component/Cards/OldCard.js","containers/Launches/index.js","containers/Catalog/component/TestTable/Planets.js","containers/Catalog/component/TestTable/exportFunc.js","containers/Layout/index.js","App.js","index.js"],"names":["LAUNCH_STATUS","1","2","3","4","5","6","7","MapChart","markers","launches","map","el","RocketAndMissionNames","name","rocketName","rocket","status","markerOffset","coordinates","location","pads","els","longitude","latitude","padsMapURL","mapURL","padsWikiURL","wikiURL","rocketwikiURL","projection","width","height","className","geography","geographies","geo","key","rsmKey","fill","stroke","on","overlayClassName","title","href","target","placement","mouseLeaveDelay","strokeWidth","strokeLinecap","strokeLinejoin","transform","cx","cy","r","d","textAnchor","y","style","fontFamily","moment","locale","Table","Column","launchStatus","Component","Timer","props","state","days","minutes","hours","seconds","time_up","deadline","count","bind","now","Date","getTime","t","this","Math","floor","setState","clearInterval","x","timeTillLaunch","setInterval","ColumnGroup","MapChartt","flightStatus","mar","size","onClick","console","log","THIS_YEAR","format","Meta","Card","Content","Layout","RangePicker","DatePicker","oldUrl","disabledDate","current","endOf","window","onscroll","document","body","scrollTop","documentElement","getElementById","display","MapLaunches","handleDisabledChange","disabled","showModal","visible","handleOk","e","handleCancel","launchData","launchOldData","NextlaunchData","loading","disabledSlider","test","launchDateButtonOnChange","url","fetch","then","response","json","data","fetchLaunches","fetchOldLaunches","fetchNextLaunches","timeBeforeToShowMarkers","scroller","scrollTo","duration","delay","smooth","ok","notification","warning","message","date","dateString","validationOfDate","secondsToGo","timer","setTimeout","func","length","showMarkers","isActive","padding","textAlign","defaultValue","showToday","onChange","allowClear","margin","mouseEnterDelay","InfoCircleOutlined","type","shape","icon","UpOutlined","scroll","scrollToTop","id","Planets","React","Header","Footer","LayoutContainer","Sider","Menu","SubMenu","theme","mode","defaultSelectedKeys","Item","to","exact","path","component","Tabless","GithubOutlined","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.6e50bd2f.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\"\nimport { Tooltip } from 'antd'\nimport './MapChart.css'\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\nconst MARKER_OF_SET =  - 30\n\n// цвета маркеров\nconst LAUNCH_STATUS = {\n  1: 'Запланированы точные дата и время запуска',\n  2: 'Дата и время будут объявлены позже',\n  3: 'green',\n  4: 'red',\n  5: 'Незапланированная задержка',\n  6: 'В полете',\n  7: 'Во время запуска произошел частичный сбой',\n}\n\nconst MapChart = ({ launches }) => {\n  const markers = launches.map(el => ({\n    RocketAndMissionNames: el.name,\n    rocketName: el.rocket.name,\n    status: el.status,\n    markerOffset: MARKER_OF_SET,\n    coordinates: [el.location.pads.map(els => (els.longitude)), el.location.pads.map(els => (els.latitude))],\n    padsMapURL: el.location.pads.map(els => (els.mapURL)),\n    padsWikiURL: el.location.pads.map(els => (els.wikiURL)),\n    rocketwikiURL: el.rocket.wikiURL,\n    latitude: el.location.pads.map(els => (els.latitude)),\n    longitude: el.location.pads.map(els => (els.longitude)),\n  }))\n\n  return (\n    <ComposableMap\n      projection=\"geoMercator\"\n      width=\"800\"\n      height=\"600\"\n      className=\"MapChartStyle\"\n    >\n      <Geographies geography={geoUrl}>\n        {({ geographies }) =>\n          geographies.map(geo => (\n            <Geography\n              key={geo.rsmKey}\n              geography={geo}\n              fill=\"#EAEAEC\"\n              stroke=\"#D6D6DA\"\n            />\n          ))\n        }\n\n      </Geographies>\n      {markers.map(({ rocketName, status, coordinates, markerOffset, padsWikiURL, rocketwikiURL, latitude, longitude }) => (\n        <Marker on coordinates={coordinates}\n        className=\"MarkersSryle\"\n        >\n          <Tooltip\n            overlayClassName=\"tooltipInMapChart\"\n            title={\n              <div>\n                <a href={\"http://maps.google.com/maps?q=\" + latitude + \",\" + longitude} target=\"_blank\">Google Maps</a><br></br>\n                <a href={padsWikiURL} target=\"_blank\">Космодром вики</a><br></br>\n                <a href={rocketwikiURL} target=\"_blank\">Ракета вики</a><br></br>\n              </div>\n\n            }\n            placement=\"bottom\"\n            mouseLeaveDelay=\"0.3\"\n          >\n            <g\n              fill={LAUNCH_STATUS[status]}\n              stroke=\"none\"\n              strokeWidth=\"3\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              transform=\"translate(-12, -24)\"\n            >\n              <circle cx=\"12\" cy=\"10\" r=\"3\" />\n              <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n            </g>\n          </Tooltip>\n\n          <text\n            textAnchor=\"middle\"\n            y={markerOffset}\n            style={{ fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\n          >\n            {rocketName}\n          </text>\n        </Marker>\n      )\n      )}\n    </ComposableMap>\n  )\n}\n\nexport default MapChart\n","import React, { Component } from 'react'\nimport { Table, Modal, Tooltip, Input, Space, Button } from 'antd'\nimport MapChart from '../MapChart/MapChart'\nimport { Link, DirectLink, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\nimport moment from 'moment'\nimport 'moment/locale/ru'\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\n\nmoment.locale()\n\nconst { Column } = Table;\n\nconst launchStatus = {\n  1: 'Дата и время определены',\n  2: 'Дата и время будут объявлены позже',\n  3: 'Успешно',\n  4: 'Неудача',\n  5: 'Задержка',\n  6: 'В полете',\n  7: 'Произошел сбой',\n}\n\nclass OldTable extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      markersLaunches: null,\n      searchText: '',\n      searchedColumn: '',\n    }\n  }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    })\n  }\n\n  handleOk = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  handleCancel = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) => record.name.toString().toLowerCase().includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n          text\n        ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex.name,\n    });\n  };\n\n  handleReset = clearFilters => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  render() {\n    const columns = [\n      {\n        title: \"Название запуска\",\n        dataIndex: \"RocketAndMissionName\",\n        width: \"400\",\n        ...this.getColumnSearchProps('Имя'),\n        onCell: (selectedRows, selectedRowKeys) => {\n          return {\n            onClick: event => {\n              this.setState({ markersLaunches: [selectedRows] })\n              this.showModal()\n            },\n          }\n        }\n      },\n      {\n        title: \"Дата запуска\",\n        dataIndex: \"net\",\n      },\n      {\n        title: \"Статус\",\n        dataIndex: \"statusText\",\n        width: \"100\",\n      },\n      {\n        title: \"Космодром\",\n        dataIndex: \"pads\",\n        width: \"300\"\n      },\n    ]\n    const oldLaunch = this.props.launches.map(el => ({\n      key: el.id,\n      RocketAndMissionName: <a>{el.name}</a>,\n      name: el.name,\n      rocket: el.rocket.name,\n      net: <Tooltip title={\n        <div>\n          <p style={{ textAlign: 'center' }}>Локальное время</p>\n          <p style={{ textAlign: 'center' }}>{moment(el.net).locale('ru').format('LLL')}</p>\n        </div>}>\n        {moment(el.net).utc(0).locale('ru').format('LLL Z')}\n      </Tooltip>,\n      statusText: launchStatus[el.status],\n      statusNumber: el.status,\n      pads: el.location.pads.map(els => (els.name)),\n      longitude: el.location.pads.map(els => (els.longitude)),\n      latitude: el.location.pads.map(els => (els.latitude)),\n      PadsMapURL: el.location.pads.map(url => (url.mapURL)),\n      PadsWikiURL: el.location.pads.map(url => (url.wikiURL)),\n      RocketWikiURL: el.rocket.wikiURL,\n    }))\n    return (\n      <div >\n        <Table\n          columns={columns}\n          dataSource={oldLaunch}\n          pagination={{\n            position: ['bottomCenter'],\n            defaultCurrent: 1,\n            // simple:\"true\",\n            pageSizeOptions: ['10', '50', '100'],\n            showQuickJumper: \"true\",\n          }}\n          size=\"small\"\n          className=\"table\"\n          style={{ margin: 10 }}\n          bordered=\"true\"\n        >\n        </Table>\n\n        <Modal\n          centered\n          // title=\"Расположение запуска на карте\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={null}\n          width='65%'\n        >\n          <MapChart launches={this.state.markersLaunches} />\n        </Modal>\n      </div>\n\n    )\n  }\n}\n\nexport default OldTable\n","import React, { Component } from 'react'\nimport { Table, Modal, Tooltip, Input, Button, Space } from 'antd'\nimport Highlighter from 'react-highlight-words';\nimport MapChart from '../MapChart/MapChart'\nimport moment from 'moment'\nimport 'moment/locale/ru'\nimport './TableOld2.css'\nimport { ClearOutlined, CheckOutlined, SearchOutlined } from '@ant-design/icons'\n\nmoment.locale()\n\nconst { Column } = Table\nconst LAUNCH_STATUS = {\n  1: 'Запуск скоро состоится',\n  2: 'Дата и время будут объявлены позже',\n  3: 'Успешно',\n  4: 'Неудача',\n  5: 'Задержка',\n  6: 'В полете',\n  7: 'Произошел сбой',\n}\n\nconst COUNTRY = {\n  USA: 'США',\n  CHN: 'Китай',\n  KAZ: 'Казахстан',\n  IRN: 'Иран',\n  RUS: 'Россия',\n  GUF: 'Французская Гвиана',\n  JPN: 'Япония',\n  NZL: 'Новая Зеландия',\n  IND: 'Индия',\n  UNK: 'Великобритания',\n}\n\nclass OldTable2 extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      markersLaunches: null,\n      searchText: '',\n      searchedColumn: '',\n    }\n  }\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    })\n  }\n\n  handleOk = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  handleCancel = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  getColumnSearchProps = dataIndex => ({\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) => record.name.toString().toLowerCase().includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: visible => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: text =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n          text\n        ),\n  })\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm()\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex.name,\n    })\n  }\n\n  handleReset = clearFilters => {\n    clearFilters()\n    this.setState({ searchText: '' })\n  }\n\n\n  render() {\n    const columns = [\n      {\n        title: \"Название запуска\",\n        dataIndex: \"RocketAndMissionName\",\n        width: '30%',\n        align: 'center',\n        ...this.getColumnSearchProps('Имя'),\n        onCell: (selectedRows, selectedRowKeys) => {\n          // selectedRowKeys -> number\n          // selectedRows    -> data\n          return {\n            onClick: event => {\n              // console.log(selectedRowKeys);\n              // console.log(selectedRows);\n              this.setState({ markersLaunches: [this.props.launches[selectedRowKeys]] })\n              console.log(this.state.markersLaunches);\n\n              this.showModal()\n            },\n          }\n        }\n      },\n      {\n        title: \"Дата запуска\",\n        dataIndex: \"net\",\n        align: 'center',\n        width: '25%',\n\n      },\n      {\n        title: \"Статус\",\n        dataIndex: \"statusText\",\n        align: 'center',\n        filters: [\n          {\n            text: 'Успешно',\n            value: 'Успешно',\n          },\n          {\n            text: 'Неудача',\n            value: 'Неудача',\n          },\n          {\n            text: 'Произошел сбой',\n            value: 'Произошел сбой',\n          },\n        ],\n        onFilter: (value, record) => { return record.statusText.indexOf(value) === 0 }\n      },\n      {\n        title: \"Площадка / Космодром\",\n        dataIndex: \"location\",\n        width: '30%',\n        align: 'center',\n        filters: [\n          {\n            text: 'США',\n            value: 'USA',\n          },\n          {\n            text: 'Китай',\n            value: 'CHN',\n          },\n          {\n            text: 'Казахстан',\n            value: 'KAZ',\n          },\n          {\n            text: 'Иран',\n            value: 'IRN',\n          },\n          {\n            text: 'Россия',\n            value: 'RUS',\n          },\n          {\n            text: 'Французская Гвиана',\n            value: 'GUF',\n          },\n          {\n            text: 'Япония',\n            value: 'JPN',\n          },\n          {\n            text: 'Новая Зеландия',\n            value: 'NZL',\n          },\n          {\n            text: 'Индия',\n            value: 'IND',\n          },\n          {\n            text: 'Великобритания',\n            value: 'UNK',\n          },\n          // {\n          //   text: 'Фильтр по космодромам',\n          //   value: 'Submenu',\n          //   children: [\n          //     {\n          //       text: 'Cape Canaveral',\n          //       value: 'Cape Canaveral',\n          //     },\n          //     {\n          //       text: 'Jiuquan',\n          //       value: 'Jiuquan',\n          //     },\n          //   ],\n          // }\n        ],\n        onFilter: (value, record) => { return record.countryCode.indexOf(value) === 0 },\n      },\n    ]\n    const loading = this.props.loading\n\n    const oldLaunch = this.props.launches.map(el => ({\n      key: el.id,\n      RocketAndMissionName: <a>{el.name}</a>,\n      name: el.name,\n      rocket: el.rocket.name,\n      net: <Tooltip title={\n        <div>\n          <p style={{ textAlign: 'center' }}>Локальное время</p>\n          <p style={{ textAlign: 'center' }}>{moment(el.net).locale('ru').format('LLL')}</p>\n        </div>}>\n        {moment(el.net).utc(0).locale('ru').format('LLL z')}\n      </Tooltip>,\n      statusText: LAUNCH_STATUS[el.status],\n      statusNumber: el.status,\n      location: <div>\n        {el.location.pads.map(els => (els.name.split(',')[0]))}<br />\n        {el.location.name.split(',')[0]}\n      </div>,\n      locationWithoutPads: el.location.name,\n      spaceortName: el.location.name.split(',')[0],\n      longitude: el.location.pads.map(els => (els.longitude)),\n      latitude: el.location.pads.map(els => (els.latitude)),\n      PadsMapURL: el.location.pads.map(url => (url.mapURL)),\n      PadsWikiURL: el.location.pads.map(url => (url.wikiURL)),\n      RocketWikiURL: el.rocket.wikiURL,\n      countryCode: el.location.countryCode,\n    }))\n\n    // переверачиваем дату, не особо важно. Влияет только на вывод\n    // oldLaunch.reverse()\n\n    return (\n      <div >\n        <Table\n          columns={columns}\n          dataSource={oldLaunch}\n          pagination={{\n            position: ['bottomCenter'],\n            defaultCurrent: 1,\n            // simple:\"true\",\n            pageSizeOptions: ['10', '50', '100'],\n            showQuickJumper: \"true\",\n            hideOnSinglePage: \"true\",\n          }}\n          size=\"small\"\n          className=\"table\"\n          style={{ margin: 10 }}\n          locale={{\n            filterReset: <ClearOutlined />,\n            filterConfirm: <CheckOutlined />,\n          }}\n          loading={loading}\n          bordered=\"true\"\n        >\n        </Table>\n        <Modal\n          centered\n          // title=\"Расположение запуска на карте\"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={null}\n          width='70%'\n          closable={false}\n        >\n          {/* <a onClick={}>ТЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫыК</a> */}\n          <MapChart launches={this.state.markersLaunches} />\n        </Modal>\n      </div>\n\n    )\n  }\n}\n\nexport default OldTable2\n","import React, {Component} from 'react'\nimport './Timer.css'\n\n\nclass Timer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            days: 0,\n            minutes: 0,\n            hours: 0,\n            seconds: 0,\n            time_up: \"\",\n            deadline: null,\n        }\n        this.count = this.count.bind(this)\n    }\n\n    count () {\n        let now = new Date().getTime();\n        let t = this.state.deadline - now;\n        let days    = Math.floor(t / (1000 * 60 * 60 * 24));\n        let hours   = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        let minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n        let seconds = Math.floor((t % (1000 * 60)) / 1000);\n        this.setState({days, minutes, hours, seconds})\n        if (t < 0) {\n            clearInterval(this.x);\n            this.setState({ days: 0, minutes: 0, hours: 0, seconds: 0, time_up: \"Запуск состоялся!\" })\n        }\n    }\n\n    componentDidMount() {\n        const deadline = new Date(this.props.timeTillLaunch).getTime();\n        setInterval(this.count, 1000)\n        this.setState({...this.state, deadline: deadline})\n    }\n\n    render() {\n        const { days, seconds, hours, minutes, time_up } = this.state\n        return (\n            <div>\n                    {(seconds < 10)\n                    ? <p>{days}д: {hours}ч: {minutes}м: 0{seconds}с</p>\n                    : <p>{days}д: {hours}ч: {minutes}м: {seconds}с</p>\n                    }\n                    <strong>{time_up}</strong>\n            </div>\n        )\n    }\n}\n\nexport default Timer","import React, {useState, useEffect, createRef} from 'react'\nimport { Table, Tooltip, Modal, Button, Space, notification } from 'antd'\nimport Timer from '../Timer/Timer'\nimport 'moment/locale/ru'\nimport moment from 'moment'\nimport './Table.css'\nmoment.locale()\n\n\nconst { Column, ColumnGroup } = Table;\n\nconst launchStatus = {\n  1: 'Запланированы точные дата и время запуска',\n  2: 'Дата и время будут объявлены позже',\n  3: 'Запуск прошел успешно',\n  4: 'Неудачный запуск',\n  5: 'Незапланированная задержка',\n  6: 'В полете',\n  7: 'Во время запуска произошел частичный сбой',\n}\n\nconst columns = [\n  {\n    title: 'Название запуска',\n    dataIndex: 'RocketAndMissionName',\n    width: '30%',\n    align: 'center',\n  },\n  {\n    title: 'Дата запуска',\n    dataIndex: 'net',\n    align: 'center',\n    width: '25%',\n  },\n  {\n    title: 'Таймер',\n    dataIndex: 'timer',\n    align: 'center',\n  },\n  {\n    title: 'Площадка / Космодром',\n    dataIndex: 'location',\n    width: '30%',\n    align: 'center',\n  },\n]\n// <CardLaunches launches={launches} />\nexport default ({ launches }) => {\n  const launchesWithTimer = launches.map(el => ({\n    rocketName: el.rocket.name,\n    location: <div>\n      {el.location.pads.map(els => (els.name.split(',')[0]))}<br />\n      {el.location.name.split(',')[0]}\n    </div>,\n    missionsName: el.missions.map(els => (els.name)),\n    RocketAndMissionName: <a >{el.name}</a>,\n    pads: el.location.pads.map(p => (p.name)),\n    net: <Tooltip title={<div><p style={{ textAlign: 'center' }}>Локальное время</p> <p style={{ textAlign: 'center' }}>{moment(el.net).locale('ru').format('LLL')}</p></div>}>{moment(el.net).utc(0).locale('ru').format('LLL z')}</Tooltip>,\n    status: launchStatus[el.status],\n    timer: <Timer timeTillLaunch={el.net} />\n  }))\n  // document.getElementById('hider').onclick = function() {\n  \n  return (\n    <div>\n      <Table\n        dataSource={launchesWithTimer}\n        pagination={false}\n        size=\"small\"\n        columns={columns}\n        bordered=\"true\"\n      />\n    </div>\n  )\n}","import React from 'react'\nimport {Table, Pagination} from 'antd'\nimport moment from 'moment'\nimport { LoadingOutlined } from '@ant-design/icons';\nimport 'moment/locale/ru'\nmoment.locale()\n\n\nconst launchStatus = {\n    1: 'Запланированы точные дата и время запуска',\n    2: 'Дата и время будут объявлены позже',\n    3: 'Запуск прошел успешно',\n    4: 'Неудачный запуск',\n    5: 'Незапланированная задержка',\n    6: 'В полете',\n    7: 'Во время запуска произошел частичный сбой',\n}\n\nconst columns = [\n    {\n        title: 'Название запуска',\n        dataIndex: 'RocketAndMissionName',\n        width: '30%',\n        align: 'center',\n      },\n      {\n        title: 'Дата запуска',\n        dataIndex: 'net',\n        align: 'center',\n        width: '25%',\n      },\n      {\n        title: 'Площадка / Космодром',\n        dataIndex: 'location',\n        width: '30%',\n        align: 'center',\n      },\n]\n\nexport default ({launches}) => {\n    const launchesWithTimer = launches.map(el => ({\n        RocketAndMissionName: el.name,\n        location: <div>\n                        {el.location.pads.map(els => (els.name.split(',')[0]))}<br/>\n                        {el.location.name.split(',')[0]}\n                  </div>,\n        net: moment(el.net).locale('ru').format('MMMM YYYY'),\n        status: launchStatus[el.status],\n        pads: el.location.pads.map(els => (els.name)),\n    }))\n    return (\n        <Table\n            dataSource={launchesWithTimer}\n            pagination={{ position: ['bottomCenter'], }}\n            size=\"small\"\n            columns={columns}\n            bordered=\"true\"\n        />\n    )\n}","import React from 'react'\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n} from \"react-simple-maps\"\nimport { Tooltip } from 'antd'\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\"\nconst markerOffset =  - 30\n\n// цвета маркеров\nconst launchStatus = {\n  1: 'Запланированы точные дата и время запуска',\n  2: 'Дата и время будут объявлены позже',\n  3: 'green',\n  4: 'red',\n  5: 'Незапланированная задержка',\n  6: 'В полете',\n  7: 'Во время запуска произошел частичный сбой',\n}\n\nconst MapChartt = ({ launches }) => {\n  const markers = launches.map(el => ({\n    rocketName: el.rocketName,\n    flightStatus: el.flightStatus,\n    coordinates: el.coordinates,\n    markerOffset: markerOffset,\n  }))\n\n  return (\n    <div>\n    <ComposableMap\n      projection=\"geoMercator\"\n      width=\"1800\"\n      height=\"600\"\n      className=\"MapChartStyle\"\n    >\n      <Geographies geography={geoUrl}>\n        {({ geographies }) =>\n          geographies.map(geo => (\n            <Geography\n              key={geo.rsmKey}\n              geography={geo}\n              fill=\"#EAEAEC\"\n              stroke=\"#D6D6DA\"\n            />\n          ))\n        }\n\n      </Geographies>\n      {markers.map(({ rocketName, flightStatus, coordinates, markerOffset  }) => (\n        <Marker on coordinates={coordinates}\n        className=\"MarkersSryle\"\n        >\n            <g\n              fill={launchStatus[flightStatus]}\n              stroke=\"none\"\n              strokeWidth=\"3\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              transform=\"translate(-12, -24)\"\n            >\n              <circle cx=\"12\" cy=\"10\" r=\"3\" />\n              <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n            </g>\n            <text\n            textAnchor=\"middle\"\n            y={markerOffset}\n            style={{ fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\n          >\n            {rocketName}\n          </text>\n        </Marker>\n      )\n      )}\n    </ComposableMap>\n    </div>\n  )\n}\n\nexport default MapChartt\n","import React, { Component } from 'react'\nimport { Table, Button } from 'antd'\nimport FetchLaunchApi from '../LoadLaunchData/index'\n\n\n\n\nexport default ({launches}) => {\n  const mar = launches\n  function func () {\n    console.log(mar);\n    \n  }\n\n  return (\n    <div>\n      <Table\n        size=\"large\"\n      >\n      </Table>\n      <Button onClick={func}>Table</Button>\n    </div>\n  )\n}\n\n// class Tabless extends Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       test: this.props.testim,\n//     }\n//   }\n//   render() {\n//     console.log('announcedLaunches', this.props.announcedLaunches);\n//     console.log('test', this.state.testim);\n    \n//     return (\n//       <div>\n//         <Table />\n//         <Button >Tabless</Button>\n//       </div>\n//     )\n//   }\n// }\n\n// export default Tabless","import React, { Component } from 'react'\nimport './SliderMapChart.css'\nimport { Slider, Switch } from 'antd'\nimport MapChartt from '../SliderMapChart/MapChart'\nimport moment from 'moment'\nimport 'moment/locale/ru'\n\nclass SliderMapChart extends Component {\n  constructor() {\n    super()\n    this.state = {\n      markersLaunches: null,\n      disabledSliderAndMap: false,\n    }\n  }\n\n  handleDisabledChange = disabledSliderAndMap => {\n    this.setState({ disabledSliderAndMap })\n    if (document.getElementById(\"slider\").hidden == false) {\n      document.getElementById(\"slider\").hidden = true\n    } else { document.getElementById(\"slider\").hidden = false }\n  }\n\n\n  render() {\n    const { disabledSliderAndMap } = this.state\n\n    const MARKERS = this.props.launches.map(el => ({\n      rocketName: el.rocket.name,\n      flightStatus: el.status,\n      coordinates: [el.location.pads.map(ele => (ele.longitude)), el.location.pads.map(ele => (ele.latitude))],\n      net: moment(el.net).utc(0).locale('ru').format('YYYY-MM-DD'),\n    }))\n\n    const MAX_VALUE = MARKERS.length - 1\n\n    if (this.state.markersLaunches == null) {\n      this.state.markersLaunches = [MARKERS[0]]\n    }\n\n\n    let markersChange = (value) => {\n\n      this.setState({ markersLaunches: [MARKERS[value]] })\n      tooltipFormat(value)\n    }\n\n    let markersChange2 = (value) => {\n\n      let count = 0\n      let newMarkers = []\n      this.setState({ markersLaunches: [] })\n      while (count < value) {\n        newMarkers.push(MARKERS[count])\n        count += 1\n      }\n      if (value == 0) {\n        this.setState({ markersLaunches: [MARKERS[0]] })\n      } else {\n        this.setState({ markersLaunches: newMarkers })\n      }\n      tooltipFormat(value)\n    }\n\n    let markersChange3 = (value) => {\n\n      let count = value[0]\n      let newMarkers = []\n      this.setState({ markersLaunches: [] })\n      while (count <= value[1]) {\n        newMarkers.push(MARKERS[count])\n        count += 1\n      }\n      \n      if (value[0] == 0 && value[1] == 0) {\n        this.setState({ markersLaunches: [MARKERS[0]] })\n      } else if (value[0] == value[1]) {\n        this.setState({ markersLaunches: [MARKERS[value[0]]] })\n      } else {\n        this.setState({ markersLaunches: newMarkers })\n      }\n      tooltipFormat(value[0])\n    }\n\n\n    // this.setState({markersLaunches: [...this.markersLaunches , ]})\n\n    function tooltipFormat(value) {\n      return MARKERS[value].net\n    }\n\n    return (\n      <div>\n        Slider: <Switch size=\"small\" checked={disabledSliderAndMap} onChange={this.handleDisabledChange} />\n        {/* <div id=\"slider\" > */}\n        <div id=\"slider\" hidden>\n          <div style={{ width: '50%' }}>\n            <div style={{ textAlign: 'center' }}>1 вариант</div>\n            <Slider\n              // range\n              id=\"slider\"\n              tipFormatter={tooltipFormat}\n              // tooltipVisible={true}\n              max={[MAX_VALUE]}\n              // min={[0]}\n              defaultValue={[0]}\n              onChange={markersChange}\n            /><br /><br /><br />\n            <div style={{ textAlign: 'center' }}>2 вариант</div>\n            <Slider\n              // range\n              id=\"slider\"\n              // tooltipVisible={true}\n              tipFormatter={tooltipFormat}\n              max={[MAX_VALUE]}\n              // min={[0]}\n              defaultValue={[0]}\n              onChange={markersChange2}\n            /><br /><br /><br />\n            <div style={{ textAlign: 'center' }}>3 вариант</div>\n            <Slider\n              range\n              id=\"slider\"\n              // tooltipVisible={true}\n              tipFormatter={tooltipFormat}\n              max={[MAX_VALUE]}\n              // min={[0]}\n              defaultValue={[0, 0]}\n              onChange={markersChange3}\n            />\n          </div>\n          {/* <Slider\n                    tipFormatter={tooltipFormat}\n                    range\n                    id=\"slider\"\n                    max={[MAX_VALUE]}\n                    defaultValue={[0, 0]}\n                    onChange={markersChange2}\n                /> */}\n          <MapChartt launches={this.state.markersLaunches} />\n        </div>\n      </div>\n    )\n\n  }\n}\nexport default SliderMapChart","import React, { Component, useState, useEffect } from 'react'\nimport moment from 'moment'\nimport { Button, Divider } from 'antd'\n\nimport MapLaunches from '../../../Launches/index'\nimport Tabless from '../TestTable/Table'\nimport LaunchTable from '../Table/Table'\n\n// следующие запуски с временем и датой\nconst URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=1,2'\n\n// следующие запуски с датой(без времени)\nconst NEXT_URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=2'\n\nconst LIMIT = 10000\nconst THIS_YEAR = moment().format('YYYY')\n\n// старые запуски\nlet oldUrl = `https://launchlibrary.net/1.4/launch?startdate=${moment(THIS_YEAR).format('YYYY-MM-DD')}&enddate=${moment().format('YYYY-MM-DD')}&limit=${LIMIT}&fields=name,net,location,status,rocket,mapURL,countryCode`\n\n// announcedLaunches: null,\n// scheduledLaunches: null,\n// finishedLaunches: null,\n\nexport function sayHi(user) {\n  alert(`Hello, ${user}!`);\n}\n\nexport function announcedLaunchesFetch(url, data) {\n  \n}\n\n// export class announcedLaunchesFetch extends Component {\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       announcedLaunches: null,\n//     }\n//   }\n//   fetchLaunches(url) {\n//     fetch(url)\n//       .then(response => response.json())\n//       .then(data => this.setState({ announcedLaunches: data }))\n//   }\n//   render (){\n//     return (\n//       <div>asdqweewq</div>\n//     )\n//   }\n\n// }\n\n// class FetchLaunchApi extends Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       announcedLaunches: null,\n//       scheduledLaunches: null,\n//       finishedLaunches: null,\n//       loading: false,\n//     }\n//     this.func = this.func.bind(this)\n//   }\n\n  // fetchLaunches(url) {\n  //   fetch(url)\n  //     .then(response => response.json())\n  //     .then(data => this.setState({ announcedLaunches: data }))\n  // }\n\n//   fetchOldLaunches(url) {\n//     this.setState({ loading: true })\n//     fetch(url)\n//       .then(response => response.json())\n//       .then(data => this.setState({ finishedLaunches: data, loading: false, }))\n//   }\n\n//   fetchNextLaunches(url) {\n//     fetch(url)\n//       .then(response => response.json())\n//       .then(data => this.setState({ scheduledLaunches: data }))\n//   }\n\n//   componentDidMount() {\n//     this.fetchLaunches(URL)\n//     this.fetchOldLaunches(oldUrl)\n//     this.fetchNextLaunches(NEXT_URL)\n//   }\n\n\n//   async validationOfDate(url) {\n//     this.setState({ loading: true })\n//     let response = await fetch(url)\n//     if (response.ok) { // если HTTP-статус в диапазоне 200-299 получаем тело ответа иначе Notification\n//       this.fetchLaunches(url)\n//     } else {\n//       this.setState({ loading: false })\n//     }\n//   }\n\n//   // launchDateButtonOnChange(date, dateString) {\n//   //   oldUrl = 'https://launchlibrary.net/1.4/launch?startdate=' + dateString[0] + '&enddate=' + dateString[1] + '&limit=' + LIMIT + '&fields=name,net,location,status,rocket,mapURL,countryCode'\n//   //   this.validationOfDate(oldUrl)\n//   // }\n\n//   func() {\n//     console.log(this.state.announcedLaunches)\n//     console.log(this.state.scheduledLaunches)\n//     console.log(this.state.finishedLaunches)\n//   }\n\n//   render() {\n//     const { announcedLaunches, scheduledLaunches, finishedLaunches, loading } = this.state\n//     return (\n//       <div>\n//         <Tabless laucnhes={finishedLaunches} />\n//         }\n//       </div>\n//     )\n//   }\n// }\n\n// export default FetchLaunchApi\n","import React, {Component} from 'react'\n\nclass Menu extends Component {\n  state = { isActive: false };\n  \n  wrapper = React.createRef();\n  \n  componentWillUnmount() {\n    this.removeOutsideClickListener();\n  }\n  func(){\n    console.log('DAAD');\n    \n  }\n  \n  addOutsideClickListener() {\n    document.addEventListener('click', this.handleDocumentClick);\n  }\n\n  removeOutsideClickListener() {\n    document.removeEventListener('click', this.handleDocumentClick);\n  }\n  \n  onShow() {\n    this.addOutsideClickListener();\n  }\n  \n  onHide() {\n    this.removeOutsideClickListener();\n  }\n  \n  onClickOutside() {\n    this.setState({ isActive: false });\n  }  \n\n  handleDocumentClick = e => {\n    if (this.wrapper.current && !this.wrapper.current.contains(e.target)) {\n      this.onClickOutside();\n    }\n  };\n  \n  toggleMenu = () => {\n    this.setState(\n      prevState => ({ isActive: !prevState.isActive }),\n      () => {\n        this.state.isActive ? this.onShow() : this.onHide();\n      },\n    );\n  };\n\n  render() {\n    const { isActive } = this.state;\n\n    return(\n      <div ref={this.wrapper}>\n        <button onClick={this.toggleMenu}>MENU</button>\n        {isActive && ( \n          <ul>\n            <li>qwe</li>\n            <li>asd</li>\n            <li>zxc</li>\n          </ul>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Menu","import React, { Component } from 'react'\nimport { Card, Avatar } from 'antd'\nimport './Card.css'\nimport moment from 'moment'\nimport 'moment/locale/ru'\nimport Timer from '../Timer/Timer'\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\nconst { Meta } = Card;\n\nclass LaunchCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n\n    }\n  }\n\n\n  func() {\n    console.log('Привет!')\n  }\n\n  render() {\n    const { launches } = this.props\n    return (\n      <div className=\"card-layout\">\n        {launches.map(el => (\n          <Card\n            hoverable\n            className=\"card-grid\"\n            onClick={this.func}\n            cover={\n              <img\n                alt=\"example\"\n                src=\"https://images.pexels.com/photos/23769/pexels-photo.jpg?auto=compress&cs=tinysrgb&dpr=2&w=500\"\n              />\n            }\n          >\n            <Meta\n              avatar={<Avatar src=\"https://image.flaticon.com/icons/svg/2929/2929073.svg\" />}\n              title={el.rocket.name}\n              description={el.name.split('|')[1]}\n            /><br />\n              Дата запуска: {moment(el.net).utc(0).locale('ru').format('LLL z')}<br /><br />\n              <Timer timeTillLaunch={el.net} />\n          </Card>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default LaunchCard","import React, { Component, useState, useEffect } from 'react'\nimport {\n  Layout,\n  DatePicker,\n  Button,\n  Tooltip,\n  notification,\n  Divider,\n  Table,\n} from 'antd'\nimport {\n  GithubOutlined,\n  UpOutlined,\n  InfoCircleOutlined,\n  FrownOutlined,\n  DesktopOutlined,\n  PieChartOutlined,\n  FileOutlined,\n  TeamOutlined,\n  UserOutlined,\n} from '@ant-design/icons'\nimport 'antd/dist/antd.css'\nimport OldTable from '../Catalog/component/TableOld/TableOld'\nimport OldTable2 from '../Catalog/component/TableOld2/TableOld2'\nimport LaunchTable from \"../Catalog/component/Table/Table\"\nimport NextLaunchTable from '../Catalog/component/NextLaunchTable/NextLaunchTable'\nimport SliderMapChart from '../Catalog/component/SliderMapChart/SliderMapChart'\nimport '../Layout/index.css' // стандарт\nimport '../Layout/index.scss' // прыгающие квадраты\nimport moment from 'moment'\nimport {\n  animateScroll as scroll, scroller\n} from 'react-scroll'\nimport MapChart from '../Catalog/component/MapChart/MapChart'\nimport {sayHi, announcedLaunchesFetch} from '../Catalog/component/LoadLaunchData'\nimport Menu from '../Catalog/component/TestTable/Menu'\n\nimport LaunchCard from '../Catalog/component/Cards/OldCard'\n\nconst { Content } = Layout\nconst LIMIT = 10000\nconst { RangePicker } = DatePicker\nconst THIS_YEAR = moment().format('YYYY')\n\n// следующие запуски с временем и датой\nconst URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=1,2'\n\n// следующие запуски с датой(без времени)\nconst NEXT_URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=2'\n\n// старые запуски\nlet oldUrl = 'https://launchlibrary.net/1.4/launch?startdate=' + moment(THIS_YEAR).format('YYYY-MM-DD') + '&enddate=' + moment().format('YYYY-MM-DD') + '&limit=' + LIMIT + '&fields=name,net,location,status,rocket,mapURL,countryCode'\n\n\n\n// const modals = Modal.warning({\n//     content: `можно вывести стартовое сообщение!`,\n//     maskClosable: \"true\"\n// }\n// )\nconst notificationForInvalidDate = (placement) => {\n  notification.warning({\n    message: <strong>Похоже, что за выбранный период времени запусков нет</strong>,\n    //   description: <strong>За выбранный период времени запусков нет!</strong>,\n    placement,\n  })\n}\n\nconst notificationMessage = (message, placement) => {\n  notification.error({\n    message,\n    placement,\n  })\n}\n\nfunction disabledDate(current) {\n  return ((current && current > moment().endOf('day')) || (current && current < moment('1961-01-01').endOf('day')))\n}\nfunction scrollFunction() {\n  if (document.body.scrollTop > 500 || document.documentElement.scrollTop > 500) {\n    document.getElementById(\"myBtn\").style.display = \"block\"\n  } else {\n    document.getElementById(\"myBtn\").style.display = \"none\"\n  }\n}\nwindow.onscroll = function () { scrollFunction() };\n\n\nfunction hid () {\n  if (document.body.scrollTop > 500 || document.documentElement.scrollTop > 500) {\n    document.getElementById(\"myBtn\").style.display = \"block\"\n  } else {\n    document.getElementById(\"myBtn\").style.display = \"none\"\n  }\n}\n\n\nclass MapLaunches extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      launchData: [],\n      launchOldData: [],\n      NextlaunchData: [],\n      visible: false,\n      loading: false,\n      disabledSlider: false,\n      test: [],\n    }\n    this.launchDateButtonOnChange = this.launchDateButtonOnChange.bind(this)\n    // this.timeBeforeToShowMarkers = this.timeBeforeToShowMarkers.bind(this)\n  }\n\n  fetchLaunches(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ launchData: data }))\n  }\n\n  fetchOldLaunches(url) {\n    this.setState({ loading: true })\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ launchOldData: data, loading: false, }))\n  }\n\n  fetchNextLaunches(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ NextlaunchData: data }))\n  }\n\n  componentDidMount() {\n    this.fetchLaunches(URL)\n    this.fetchOldLaunches(oldUrl)\n    this.fetchNextLaunches(NEXT_URL)\n    this.timeBeforeToShowMarkers()\n  }\n\n  handleDisabledChange = disabled => {\n    this.setState({ disabled })\n  }\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    })\n  }\n\n  handleOk = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  handleCancel = e => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  scrollToOldTable2() {\n    scroller.scrollTo('scroll-to-Oldtable2', {\n      duration: 800,\n      delay: 0,\n      smooth: 'easeInOutQuart'\n    })\n  }\n\n  async validationOfDate(url) {\n    this.setState({ loading: true })\n    let response = await fetch(url)\n    if (response.ok) { // если HTTP-статус в диапазоне 200-299 получаем новые данные иначе Notification\n      this.fetchOldLaunches(url)\n    } else {\n      notificationForInvalidDate('topRight')\n      this.setState({ loading: false })\n    }\n  }\n\n  launchDateButtonOnChange(date, dateString) {\n    oldUrl = `https://launchlibrary.net/1.4/launch?startdate=${dateString[0]}&enddate=${dateString[1]}&limit=${LIMIT}&fields=name,net,location,status,rocket,mapURL,countryCode`\n    this.validationOfDate(oldUrl)\n  }\n\n    timeBeforeToShowMarkers() {\n    let secondsToGo = 1\n\n    const timer = setInterval(() => {\n      secondsToGo -= 1\n    }, 1000);\n\n    setTimeout(() => {\n      clearInterval(timer)\n      this.func()\n    }, secondsToGo * 1000)\n\n  }\n\n   showMarkers () {\n    if (this.state.loading == false) {\n      let count = 0\n    let flag = 1\n    const timer = setInterval(() => {\n      this.setState({test: [this.state.launchOldData.launches[count]]})\n      count++\n      if (count == this.state.launchOldData.launches.length - 1){\n        flag = 0\n      }\n    }, 1000)\n\n    setTimeout(() => {\n      clearInterval(timer)\n      this.func()\n    }, count * 1000)\n    }\n    \n  }\n\n  func () {\n    if (this.state.loading == false) {\n    let count = this.state.launchOldData.launches.length\n    const timer = setInterval(() => {\n      count--\n      this.setState({test: [this.state.launchOldData.launches[count]]})\n    }, 1000)\n\n    setTimeout(() => {\n      clearInterval(timer)\n      this.showMarkers()\n    }, count * 1000)\n  }\n  }\n\n  render() {\n    const { launchOldData, launchData, NextlaunchData, loading, disabled, isActive } = this.state\n    return (\n      <div>\n        {/* {launchOldData && NextlaunchData && launchData\n          ? */}\n          <Content style={{ padding: '0 50px' }}>\n            <div className=\"site-layout-content\">\n\n              {/* <Divider><h1 style={{ textAlign: 'center' }}>Обьявленные запуски</h1></Divider>\n              <LaunchTable launches={launchData.launches} /> */}\n\n              {/* <Divider className=\"next-launch-table\"><h1 style={{ textAlign: 'center' }}>Запланированные запуски</h1></Divider>\n              <NextLaunchTable launches={NextlaunchData.launches} /> */}\n              <Divider><h1 style={{ textAlign: 'center' }}>Состоявшиеся запуски</h1></Divider>\n\n        {/* <div id=\"hid\">\n          aAAAAAASSSSSDDDDD\n        </div> */}\n              <RangePicker\n                className=\"RangePicker\"\n                defaultValue={[moment(THIS_YEAR), moment()]}\n                showToday={false, true}\n                onChange={this.launchDateButtonOnChange}\n                disabledDate={disabledDate}\n                allowClear={false}\n                style={{ margin: 10 }}\n              />\n\n              <Button onClick={this.timeBeforeToShowMarkers} >ТЫК</Button>\n{/* <Menu /> */}\n              <Tooltip\n                title={\n                  <p>Здесь можно настроить период запусков</p>\n                }\n                mouseEnterDelay={0.2}\n                mouseLeaveDelay={0.5}\n                placement=\"top\"\n              >\n                <InfoCircleOutlined />\n              </Tooltip>\n              <MapChart launches={this.state.test} />\n                {/* <OldTable2 launches={launchOldData.launches} loading={loading} /> */}\n                {/* <SliderMapChart launches={launchOldData.launches} /> */}\n            </div>\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              icon={<UpOutlined />}\n              onClick={scroll.scrollToTop}\n              id=\"myBtn\"\n              title=\"Наверх!\"\n            />\n          </Content>\n          {/* : <div><Divider className=\"next-launch-table\"><strong style={{ textAlign: 'center' }}>ОБОЖДИ</strong></Divider></div>} */}\n      </div>\n    )\n  }\n}\n\nexport default MapLaunches\n","import React ,{ useState, useEffect } from 'react';\nimport { URL } from './exportFunc';\n\n// async validationOfDate(url) {\n//   this.setState({ loading: true })\n//   let response = await fetch(url)\n//   if (response.ok) { // если HTTP-статус в диапазоне 200-299 получаем тело ответа иначе Notification\n//     this.fetchOldLaunches(url)\n//   } else {\n//     notificationForInvalidDate('topRight')\n//     this.setState({ loading: false })\n//   }\n// }\n\n\n\nfunction Planets() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [launches, setItems] = useState([]);\n  let flag = false\n\n  \n\n    useEffect(() => {\n        fetch(URL)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            setIsLoaded(true);\n            setItems(result);\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\nconsole.log(launches);\n\n  if (flag) {\n    return true\n  } else return false\n}\n\nexport default Planets\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { notification } from 'antd'\nimport moment from 'moment'\nimport { Planets } from './Planets'\nconst THIS_YEAR = moment().format('YYYY')\nconst LIMIT = 10000\n\nexport const URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=1,2'\nexport const URLS = 'https://launchlibrary.net/1.4/launch?startdate=2020-05-27&enddate=2020-05-27&limit=10000&fields=name,net,location,status,rocket,mapURL,countryCode'\n\n// следующие запуски с датой(без времени)\nconst NEXT_URL = 'https://launchlibrary.net/1.4/launch/next/1000?status=2'\n\n// старые запуски\nlet oldUrl = 'https://launchlibrary.net/1.4/launch?startdate=' + moment(THIS_YEAR).format('YYYY-MM-DD') + '&enddate=' + moment().format('YYYY-MM-DD') + '&limit=' + LIMIT + '&fields=name,net,location,status,rocket,mapURL,countryCode'\n\nconst notificationForInvalidDate = (placement) => {\n  notification.warning({\n    message: <strong>Похоже, что за выбранный период времени запусков нет</strong>,\n    //   description: <strong>За выбранный период времени запусков нет!</strong>,\n    placement,\n  })\n}\n\n\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      launchData: null,\n      flag: false,\n    };\n  }\n\n  async validationOfDate(url) {\n    let response = await fetch(url)\n    if (response.ok) { // если HTTP-статус в диапазоне 200-299 получаем тело ответа иначе Notification\n      this.setState({ flag: true })\n    } else {\n      this.setState({ flag: false })\n    }\n  }\n\n  fetchLaunches(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ launchData: data }))\n  }\n\n  componentDidMount() {\n    // this.fetchLaunches(URLS)\n    this.validationOfDate(URLS)\n  }\n\n  render() {\n    {\n      this.state.flag\n      ? console.log(true)\n      : console.log(false)\n    }\n    if (this.state.flag) {\n      return <div>trueeee</div>\n    } else { return (<div>falseee</div>) }\n    // return this.state.flag\n  }\n}\n\nexport default MyComponent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport function YesOrNoPreloader() {\n  const [hasError, setErrors] = useState(false);\n  const [announcedLaunches, setAnnouncedLaunches] = useState([]);\n  const [scheduledLaunches, setScheduledLaunches] = useState([]);\n  const [finishedLaunches, setFinishedLaunches] = useState();\n\n  useEffect(() => {\n    async function fetchData1() {\n      const res = await fetch(URL)\n      res\n        .json()\n        .then(res => setAnnouncedLaunches(res.announcedLaunches))\n        .catch(err => setErrors(err));\n    }\n    fetchData1()\n  }, [])\n\n  useEffect(() => {\n    async function fetchData2() {\n      const res = await fetch(NEXT_URL)\n      res\n        .json()\n        .then(res => setScheduledLaunches(res))\n        .catch(err => setErrors(err));\n    }\n    fetchData2()\n  }, [])\n\n  useEffect(() => {\n    async function fetchData3() {\n      const res = await fetch(oldUrl)\n      res\n        .json()\n        .then(res => setFinishedLaunches(res))\n        .catch(err => setErrors(err));\n    }\n    fetchData3()\n  }, [])\n\n  if (announcedLaunches && scheduledLaunches && finishedLaunches) {\n    console.log('AZAZAZAZA')\n    return (true)\n  } else { return (false) }\n}\n\n\nexport function FetchLaunch() {\n  const [hasError, setErrors] = useState(false);\n  const [announcedLaunches, setAnnouncedLaunches] = useState([]);\n  const [scheduledLaunches, setScheduledLaunches] = useState([]);\n  const [finishedLaunches, setFinishedLaunches] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(URL)\n      res\n        .json()\n        .then(res => setAnnouncedLaunches(res))\n        .catch(err => setErrors(err));\n    }\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(NEXT_URL)\n      res\n        .json()\n        .then(res => setScheduledLaunches(res))\n        .catch(err => setErrors(err));\n    }\n    fetchData()\n  }, [])\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(oldUrl)\n      res\n        .json()\n        .then(res => setFinishedLaunches(res))\n        .catch(err => setErrors(err));\n    }\n    fetchData()\n  }, [])\n\n  if (announcedLaunches && scheduledLaunches && finishedLaunches) {\n    return true\n  } else { return false }\n}","import React, { Component } from 'react'\nimport {\n  Layout,\n  Menu,\n} from 'antd'\nimport {\n  GithubOutlined,\n} from '@ant-design/icons'\nimport 'antd/dist/antd.css'\nimport './index.css' // стандарт\nimport './index.scss' // прыгающие квадраты\nimport {\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport MapLaunches from '../Launches'\nimport Tabless from '../Catalog/component/TestTable/Table'\nimport { YesOrNoPreloader, FetchLaunch, MyComponent } from '../Catalog/component/TestTable/exportFunc'\n\n\nconst { Header, Content, Footer, Sider } = Layout\nconst { SubMenu } = Menu\nlet preloader = false\n// console.log(FetchLaunch);\n\n\nclass LayoutContainer extends Component {\n  render() {\n    return (\n      <div>\n        <Layout id=\"layout\">\n            <Header>\n              <div className=\"logo\"></div>\n              <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['3']} style={{ textAlign: 'right' }}>\n                <Menu.Item key=\"1\"><NavLink to=\"/\">         Приветсвие    </NavLink></Menu.Item>\n                <Menu.Item key=\"2\"><NavLink to=\"/Table\">    Cтатистика    </NavLink></Menu.Item>\n                <Menu.Item key=\"3\"><NavLink to=\"/Launches\"> Запуски       </NavLink></Menu.Item>\n              </Menu>\n            </Header>\n\n            <Switch>\n              <Route exact path='/' />\n              <Route exact path='/Table' component={Tabless} />\n              <Route exact path='/Launches' component={MapLaunches} />\n            </Switch>\n\n            <Footer className=\"footer\">\n              Design © 2020 <br></br>\n              <GithubOutlined />\n              <a href=\"https://github.com/SShaposhnik/global-launches-app\" target=\"_blank\"> Github</a>\n            </Footer>\n          </Layout>\n\n      </div>\n    )\n  }\n}\nexport default LayoutContainer\n","import React from 'react';\nimport './App.css';\nimport LayoutContainer from './containers/Layout/index'\nimport { BrowserRouter } from 'react-router-dom'\n// import LayoutContainer from './containers/Layout/habr'\nimport Planets from './containers/Catalog/component/TestTable/Planets'\nimport MyComponent from './containers/Catalog/component/TestTable/exportFunc'\n\n// if (<MyComponent />) {\n//   console.log('123')\n// } else { console.log('321') }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n          <LayoutContainer/>\n      </BrowserRouter>\n      {/* {<MyComponent />\n        ? <div>trueeee</div>\n        : <div>falseee</div>\n      } */}\n    </div>\n  );\n}\n\nexport default App\n{/* <BrowserRouter>\n          <LayoutContainer/>\n      </BrowserRouter> */}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}